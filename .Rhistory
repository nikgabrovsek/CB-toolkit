t(X) %*% X)
(1/sigma2) * (t(X) %*% X)
for (i in 1:reps) {
#Sample B conditional on sigma N(M*, V*)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
check <- -1
while (check < 0) {
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
b <- matrix(c(B[2], B[3], 1, 0), 2, 2, byrow = T) #Companion matrix to check for stability
ee <- max(abs(eigen(b)$values))
if(ee <= 1){
check <- 1
}
}
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,] <- t(B)
out1[i-burn,] <- sigma2
}
}
t(B)
out1
out1[i-burn,,] <- t(B)
for (i in 1:reps) {
#Sample B conditional on sigma N(M*, V*)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
check <- -1
while (check < 0) {
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
b <- matrix(c(B[2], B[3], 1, 0), 2, 2, byrow = T) #Companion matrix to check for stability
ee <- max(abs(eigen(b)$values))
if(ee <= 1){
check <- 1
}
}
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,,] <- t(B)
out1[i-burn,,] <- sigma2
}
}
t(X) %*% X
(1/sigma2) * t(X) %*% X
sigma2
(1/sigma2)
(1/sigma2) * t(X) %*% X
t(X) %*% X
X
t(X) %*% X
(1/sigma2) * t(X) %*% X
1/sigma2
(1/sigma2) * t(X) %*% X
(1/sigma2) * t(X) %*% X
(1/sigma2) * t(X) %*% X
(1/sigma2) * t(X) %*% X
class(t(X))
class(sigma2)
#Define data as Y
Y <- DATA[,3]
Y <- as.matrix(Y)
#Define number of obs
TT <- nrow(Y)
#Create lags
X <- mlag(Y, 2)
#Add constant
X <- cbind(X, 1)
#Get rid of first p observations
Y <- Y[3:224,]
X <- X[3:224,]
#Set priors and starting values
#Priors for B
B0 <- matrix(0, 3, 1)
Sigma0 <- matrix(0, 3, 3)
diag(Sigma0) <- 1
#Priors for sigma2
T0 <- 1
D0 <- 0.1
#Starting values and total number of Gibbs iterations
B <- B0
sigma2 <- 1
reps <- 5000
burn <- 4000
out1 <- array(NA, c(reps, 3, 1))
out2 <- array(NA, c(reps, 1, 1))
(1/sigma2) * t(X) %*% X)
(1/sigma2) * t(X) %*% X
(1/sigma2) * t(X) %*% X)
class(sigma2)
class(t(X))
D1 / z0z0
sigma2 <- D1 / z0z0
class(sigma2)
for (i in 1:reps) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
check <- -1
while (check < 0) {
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
b <- matrix(c(B[2], B[3], 1, 0), 2, 2, byrow = T) #Companion matrix to check for stability
ee <- max(abs(eigen(b)$values))
if(ee <= 1){
check <- 1
}
}
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,,] <- t(B)
out1[i-burn,,] <- sigma2
}
}
mean(out1)
out1
plot(out1[,1])
plot(out1[,,1])
#Define data as Y
Y <- DATA[,3]
Y <- as.matrix(Y)
#Define number of obs
TT <- nrow(Y)
#Create lags
X <- mlag(Y, 2)
#Add constant
X <- cbind(X, 1)
#Get rid of first p observations
Y <- Y[3:224,]
X <- X[3:224,]
#Set priors and starting values
#Priors for B
B0 <- matrix(0, 3, 1)
Sigma0 <- matrix(0, 3, 3)
diag(Sigma0) <- 1
#Priors for sigma2
T0 <- 1
D0 <- 0.1
#Starting values and total number of Gibbs iterations
B <- B0
sigma2 <- 1
reps <- 5000
burn <- 4000
out1 <- array(NA, c(reps, 3, 1))
out2 <- array(NA, c(reps, 1, 1))
for (i in 1:reps) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
check <- -1
while (check < 0) {
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
b <- matrix(c(B[2], B[3], 1, 0), 2, 2, byrow = T) #Companion matrix to check for stability
ee <- max(abs(eigen(b)$values))
if(ee <= 1){
check <- 1
}
}
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,,] <- t(B)
out1[i-burn,,] <- sigma2
}
}
apply(out1, 2, mean)
sigma2
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
check <- -1
while (check < 0) {
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
b <- matrix(c(B[2], B[3], 1, 0), 2, 2, byrow = T) #Companion matrix to check for stability
ee <- max(abs(eigen(b)$values))
if(ee <= 1){
check <- 1
}
}
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
B
B
t(B)
sigma2
for (i in 1:reps) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
check <- -1
while (check < 0) {
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
b <- matrix(c(B[2], B[3], 1, 0), 2, 2, byrow = T) #Companion matrix to check for stability
ee <- max(abs(eigen(b)$values))
if(ee <= 1){
check <- 1
}
}
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,,] <- t(B)
out1[i-burn,,] <- sigma2
}
}
out1
out1[5000,,]
for (i in 1:reps) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
check <- -1
while (check < 0) {
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
b <- matrix(c(B[2], B[3], 1, 0), 2, 2, byrow = T) #Companion matrix to check for stability
ee <- max(abs(eigen(b)$values))
if(ee <= 1){
check <- 1
}
}
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,,] <- t(B)
out1[i-burn,,] <- sigma2
}
}
out1[5000,,]
t(B)
B
B
b
ee
for (i in 1:reps) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,,] <- t(B)
out1[i-burn,,] <- sigma2
}
}
mean(out1[,2])
out1
#Define data as Y
Y <- DATA[,3]
Y <- as.matrix(Y)
#Define number of obs
TT <- nrow(Y)
#Create lags
X <- mlag(Y, 2)
#Add constant
X <- cbind(X, 1)
#Get rid of first p observations
Y <- Y[3:224,]
X <- X[3:224,]
#Set priors and starting values
#Priors for B
B0 <- matrix(0, 3, 1)
Sigma0 <- matrix(0, 3, 3)
diag(Sigma0) <- 1
#Priors for sigma2
T0 <- 1
D0 <- 0.1
#Starting values and total number of Gibbs iterations
B <- B0
sigma2 <- 1
reps <- 5000
burn <- 4000
reps <- 5000
burn <- 4000
out1 <- array(NA, c(reps, 3, 1))
out2 <- array(NA, c(reps, 1, 1))
out1
matrix(NA, reps, 3, 1))
out1 <- matrix(NA, reps, 3, 1)
View(out1)
out1 <- matrix(NA, reps, 3, 1)
out2 <- matrix(NA, reps, 1, 1)
for (i in 1:reps) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,,] <- t(B)
out1[i-burn,,] <- sigma2
}
}
for (i in 1:reps) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,] <- t(B)
out1[i-burn,] <- sigma2
}
}
View(out1)
B
View(out1)
out1[5000]
out1[5000],
out1[5000,]
total <- burn + reps
reps <- 5000
burn <- 4000
total <- burn + reps
out1 <- matrix(NA, reps, 3, 1)
out2 <- matrix(NA, reps, 1, 1)
for (i in 1:total) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,] <- t(B)
out1[i-burn,] <- sigma2
}
}
View(out1)
B
t(B)
out1[i-burn,] <- t(B)
out[5000,]
out1[5000,]
out1[2000,]
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
B
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
B
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i < burn){
out1[i-burn,] <- t(B)
out1[i-burn,] <- sigma2
}
View(out1)
for (i in 1:total) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i > burn){
out1[i-burn,] <- t(B)
out1[i-burn,] <- sigma2
}
}
View(out1)
mean(out1[,2])
mean(out1[,3])
mean(out1[,1])
mean(out1[,4])
mean(out1[,2])
B
sigma2
for (i in 1:total) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i > burn){
out1[i-burn,] <- t(B)
out2[i-burn,] <- sigma2
}
}
mean(out1[,2])
mean(out1[,3])
mean(out1[,1])
View(CPI)
View(out1)
X
t(X)
View(X)
X
t(X)
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
B
B
X
B
X
B
