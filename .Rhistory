V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i > burn){
out1[i-burn,] <- t(B)
out2[i-burn,] <- sigma2
#Compute forecasts for 2 years ahead
yhat <- matrix(data = 0, nrow = 14, ncol = 1)
yhat[1:2,] <- Y[c(length(Y)-1,length(Y))] #starting values
cfactor <- sqrt(sigma2) #standard deviation of the shocks
for(m in 3:14){
yhat[m] <- matrix(data = c(1, yhat[m-1], yhat[m-2]), nrow = 1, ncol = 3) %*% B + rnorm(1,0, sd = 1/100)
}
yhat <- as.numeric(yhat)
out3[i-burn,,] <- c(Y,yhat)
}
}
median_forecast <- apply(out3, 3, mean)
plot(median_forecast, type = "l")
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
matrix(data = c(1, yhat[m-1], yhat[m-2]), nrow = 1, ncol = 3) %*% B
for (i in 1:total) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i > burn){
out1[i-burn,] <- t(B)
out2[i-burn,] <- sigma2
#Compute forecasts for 2 years ahead
yhat <- matrix(data = 0, nrow = 14, ncol = 1)
yhat[1:2,] <- Y[c(length(Y)-1,length(Y))] #starting values
cfactor <- sqrt(sigma2) #standard deviation of the shocks
for(m in 3:14){
yhat[m] <- matrix(data = c(1, yhat[m-1], yhat[m-2]), nrow = 1, ncol = 3) %*% B + rnorm(1,0, sd = 1/100)
}
yhat <- as.numeric(yhat)
out3[i-burn,,] <- c(Y,yhat)
}
}
#Set priors and starting values
#Priors for B
B0 <- matrix(0, 3, 1)
Sigma0 <- matrix(0, 3, 3)
diag(Sigma0) <- 1
#Priors for sigma2
T0 <- 1
D0 <- 0.1
#Starting values and total number of Gibbs iterations
B <- B0
sigma2 <- 1
reps <- 5000
burn <- 4000
forecast <- 14
total <- burn + reps
out1 <- matrix(NA, reps, 3, 1)
out2 <- matrix(NA, reps, 1, 1)
out3 <- matrix(NA, reps, 1, length(Y)+forecast)
out3 <- array(NA, dim = c(reps, 1, length(Y)+forecast))
for (i in 1:total) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i > burn){
out1[i-burn,] <- t(B)
out2[i-burn,] <- sigma2
#Compute forecasts for 2 years ahead
yhat <- matrix(data = 0, nrow = 14, ncol = 1)
yhat[1:2,] <- Y[c(length(Y)-1,length(Y))] #starting values
cfactor <- sqrt(sigma2) #standard deviation of the shocks
for(m in 3:14){
yhat[m] <- matrix(data = c(1, yhat[m-1], yhat[m-2]), nrow = 1, ncol = 3) %*% B + rnorm(1,0, sd = 1/100)
}
yhat <- as.numeric(yhat)
out3[i-burn,,] <- c(Y,yhat)
}
}
median_forecast <- apply(out3, 3, mean)
plot(median_forecast, type = "l")
median_forecast <- apply(out3, 3, mean)
plot(median_forecast, type = "l")
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
rnorm(1,0, sd = 1/100)
B
DATA <- read.csv("DATA.csv")
#Define data as Y
Y <- DATA[,3]
Y <- as.matrix(Y)
#Define number of obs
TT <- nrow(Y)
#Create lags
X <- mlag(Y, 2)
#Add constant
X <- cbind(X, 1)
#Get rid of first p observations
Y <- Y[3:224,]
X <- X[3:224,]
plot(Y, type = "l", main = "CPI in US", ylab = "YoY", xlab = "Time")
#Set priors and starting values
#Priors for B
B0 <- matrix(0, 3, 1)
Sigma0 <- matrix(0, 3, 3)
a
#Create lags
X <- mlag(Y, 2)
#Add constant
X <- cbind(X, 1)
#Get rid of first p observations
Y <- Y[3:224,]
X <- X[3:224,]
plot(Y, type = "l", main = "CPI in US", ylab = "YoY", xlab = "Time")
#Set priors and starting values
#Priors for B
B0 <- matrix(0, 3, 1)
#Define data as Y
Y <- DATA[,3]
Y <- as.matrix(Y)
#Define number of obs
TT <- nrow(Y)
#Create lags
X <- mlag(Y, 2)
mlag <- function(X, lag){
p <- lag
X <- as.matrix(X)
Traw <- nrow(X)
N <- ncol(X)
Xlag <- matrix(0, Traw, p*N)
for (ii in 1:p) {
Xlag[(p+1):Traw, (N*(ii-1)+1):(N*ii)]=X[(p+1-ii):(Traw-ii), (1:N)]
}
return(Xlag)
}
#Create lags
X <- mlag(Y, 2)
#Add constant
X <- cbind(X, 1)
#Get rid of first p observations
Y <- Y[3:224,]
X <- X[3:224,]
plot(Y, type = "l", main = "CPI in US", ylab = "YoY", xlab = "Time")
#Set priors and starting values
#Priors for B
B0 <- matrix(0, 3, 1)
Sigma0 <- matrix(0, 3, 3)
diag(Sigma0) <- 1
#Priors for sigma2
T0 <- 1
D0 <- 0.1
#Starting values and total number of Gibbs iterations
B <- B0
sigma2 <- 1
reps <- 5000
burn <- 4000
forecast <- 14
total <- burn + reps
out1 <- matrix(NA, reps, 3, 1)
out2 <- matrix(NA, reps, 1, 1)
out2 <- matrix(NA, reps, 1, 1)
out3 <- array(NA, dim = c(reps, 1, length(Y)+forecast))
i = 1
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
out1[i-burn,] <- t(B)
out2[i-burn,] <- sigma2
#Compute forecasts for 2 years ahead
yhat <- matrix(data = 0, nrow = 14, ncol = 1)
yhat
yhat[1:2,] <- Y[c(length(Y)-1,length(Y))] #starting values
yhat
for(m in 3:14){
yhat[m] <- matrix(data = c(1, yhat[m-1], yhat[m-2]), nrow = 1, ncol = 3) %*% B + rnorm(1,0)*sigma2
}
yhat
yhat[m-1]
yhat[m-2]
B
#Compute forecasts for 2 years ahead
yhat <- matrix(data = 0, nrow = 14, ncol = 1)
yhat[1:2,] <- Y[c(length(Y)-1,length(Y))] #starting values
cfactor <- sqrt(sigma2) #standard deviation of the shocks
cfactor
sigma2
m=3
yhat[m-1]
yhat[m-2]
matrix(data = c(1, yhat[m-1], yhat[m-2]), nrow = 1, ncol = 3) %*% B
B
DATA <- read.csv("DATA.csv")
#Define data as Y
Y <- DATA[,3]
Y <- as.matrix(Y)
#Define number of obs
TT <- nrow(Y)
#Create lags
X <- mlag(Y, 2)
#Add constant
X <- cbind(1,X)
#Get rid of first p observations
Y <- Y[3:224,]
X <- X[3:224,]
plot(Y, type = "l", main = "CPI in US", ylab = "YoY", xlab = "Time")
#Set priors and starting values
#Priors for B
B0 <- matrix(0, 3, 1)
Sigma0 <- matrix(0, 3, 3)
diag(Sigma0) <- 1
#Priors for sigma2
T0 <- 1
D0 <- 0.1
#Starting values and total number of Gibbs iterations
B <- B0
sigma2 <- 1
reps <- 5000
burn <- 4000
forecast <- 14
total <- burn + reps
out1 <- matrix(NA, reps, 3, 1)
out2 <- matrix(NA, reps, 1, 1)
out3 <- array(NA, dim = c(reps, 1, length(Y)+forecast))
for (i in 1:total) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i > burn){
out1[i-burn,] <- t(B)
out2[i-burn,] <- sigma2
#Compute forecasts for 2 years ahead
yhat <- matrix(data = 0, nrow = 14, ncol = 1)
yhat[1:2,] <- Y[c(length(Y)-1,length(Y))] #starting values
cfactor <- sqrt(sigma2) #standard deviation of the shocks
for(m in 3:14){
yhat[m] <- matrix(data = c(1, yhat[m-1], yhat[m-2]), nrow = 1, ncol = 3) %*% B + rnorm(1,0)*cfactor
}
yhat <- as.numeric(yhat)
out3[i-burn,,] <- c(Y,yhat)
}
}
median_forecast <- apply(out3, 3, mean)
plot(median_forecast, type = "l")
mlag <- function(X, lag){
p <- lag
X <- as.matrix(X)
Traw <- nrow(X)
N <- ncol(X)
Xlag <- matrix(0, Traw, p*N)
for (ii in 1:p) {
Xlag[(p+1):Traw, (N*(ii-1)+1):(N*ii)]=X[(p+1-ii):(Traw-ii), (1:N)]
}
return(Xlag)
}
DATA <- read.csv("DATA.csv")
#Define data as Y
Y <- DATA[,3]
Y <- as.matrix(Y)
#Define number of obs
TT <- nrow(Y)
#Create lags
X <- mlag(Y, 2)
#Add constant
X <- cbind(1,X)
#Get rid of first p observations
Y <- Y[3:224,]
X <- X[3:224,]
plot(Y, type = "l", main = "CPI in US", ylab = "YoY", xlab = "Time")
#Set priors and starting values
#Priors for B
B0 <- matrix(0, 3, 1)
Sigma0 <- matrix(0, 3, 3)
diag(Sigma0) <- 1
#Priors for sigma2
T0 <- 1
D0 <- 0.1
#Starting values and total number of Gibbs iterations
B <- B0
sigma2 <- 1
reps <- 5000
burn <- 4000
forecast <- 14
total <- burn + reps
out1 <- matrix(NA, reps, 3, 1)
out2 <- matrix(NA, reps, 1, 1)
out3 <- array(NA, dim = c(reps, 1, length(Y)+forecast))
for (i in 1:total) {
#Sample B conditional on sigma N(M*, V*)
sigma2 <- as.numeric(sigma2)
M <- solve(solve(Sigma0) + (1/sigma2) * t(X) %*% X) %*% (solve(Sigma0) %*% B0 + (1/sigma2) * t(X) %*% Y)
V <- solve(solve(Sigma0) + (1/sigma2) * (t(X) %*% X))
B <- M + t(matrix(rnorm(3,1), 1, 3) %*% chol(V))
#Sample sigma2 conditional on B from IG(T1, D1);
#Compute residuals
resids <- Y - X %*% B
T1 = T0 + TT
D1 <- D0 + t(resids) %*% resids
#Draw from IG
z0 <- rnorm(T1,1)
z0z0 <- t(z0) %*% z0
sigma2 <- D1 / z0z0
if(i > burn){
out1[i-burn,] <- t(B)
out2[i-burn,] <- sigma2
#Compute forecasts for 2 years ahead
yhat <- matrix(data = 0, nrow = 14, ncol = 1)
yhat[1:2,] <- Y[c(length(Y)-1,length(Y))] #starting values
cfactor <- sqrt(sigma2) #standard deviation of the shocks
for(m in 3:14){
yhat[m] <- matrix(data = c(1, yhat[m-1], yhat[m-2]), nrow = 1, ncol = 3) %*% B + rnorm(1,0)*cfactor
}
yhat <- as.numeric(yhat)
out3[i-burn,,] <- c(Y,yhat)
}
}
median_forecast <- apply(out3, 3, mean)
plot(median_forecast, type = "l")
low_interval <- apply(out3, 3, quantile, 0.16, na.rm = T)
low_interval <- apply(out3, 3, quantile, 0.16)
high_interval <- apply(out3, quantile, 0.84)
high_interval <- apply(out3, 3, quantile, 0.84)
lines(low_interval)
lines(low_interval, col = 2)
plot(median_forecast, type = "l", col = 3)
lines(low_interval, col = 2)
lines(high_interval, col = 1)
X
Y
View(DATA)
Y
setwd("~/Desktop/CB toolkit tutorial/CB-toolkit")
DATA <- read.csv("DATA.csv")
TT <- nrow(Y)
Y <- read.csv("DATA.csv")
TT <- nrow(Y)
View(Y)
Y <- Y[, c(1,3)]
View(Y)
TT <- nrow(Y)
mlag <- function(X, lag){
p <- lag
X <- as.matrix(X)
Traw <- nrow(X)
N <- ncol(X)
Xlag <- matrix(0, Traw, p*N)
for (ii in 1:p) {
Xlag[(p+1):Traw, (N*(ii-1)+1):(N*ii)]=X[(p+1-ii):(Traw-ii), (1:N)]
}
return(Xlag)
}
X <- mlag(Y, 2)
View(X)
View(X)
Y <- Y[, 3]
Y <- read.csv("DATA.csv")
Y <- Y[, 3]
TT <- nrow(Y)
X <- mlag(Y, 2)
Y <- Y[3:224,]
# Create RHS matrix
plag <- 2
Y <- Y[plag+1:nrow(Y),]
Y <- read.csv("DATA.csv")
Y <- Y[, 3]
TT <- nrow(Y)
# Create RHS matrix
plag <- 2
X <- mlag(Y, plag)
Y <- Y[plag+1:nrow(Y),]
X <- X[plag+1:nrow(Y),]
plag+1
nrow(Y)
nrow(Y)
Y <- read.csv("DATA.csv")
Y <- Y[, 3]
TT <- nrow(Y)
TT <- NROW(Y)
TT
Y <- Y[plag+1:NROW(Y),]
Y <- read.csv("DATA.csv")
Y <- Y[, 3]
TT <- NROW(Y)
# Create RHS matrix
plag <- 2
X <- mlag(Y, plag)
Y <- Y[plag+1:NROW(Y),]
X <- X[plag+1:NROW(Y),]
plag+1
NROW(Y)
Y <- Y[plag+1:NROW(Y)]
X <- X[plag+1:NROW(Y)]
# Set priors and starting values
# Priors for B
B0 <- matrix(0, 3, 1)
View(B0)
Sigma0 <- matrix(0, 3, 3)
diag(Sigma0) <- 1
View(Sigma0)
T0 <- 1
D0 <- 0.1
rho0 <- 0
# Starting values
B <- B0
rho <- rho0
sigma2 <- 1
reps <- 15000
burn <- 12000
forecast <- 14
total <- burn + reps
out1 <- matrix(NA, reps, 3, 1)
out2 <- matrix(NA, reps, 1, 1)
out3 <- array(NA, dim = c(reps, 1, length(Y)+forecast))
